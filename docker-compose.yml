version: "3.7"
services:
  zookeeper:
    image: debezium/zookeeper:latest
    ports:
      - 2888:2888
      - 3888:3888
      - 2181:2181
    # volumes:
    # - ./db_data/zookeeper/data:/zookeeper/data
    # - ./db_data/zookeeper/txns:/zookeeper/txns
    networks:
      - zookeeper

  connect:
    image: debezium/connect:1.2
    ports:
      - "8083"
    environment:
      GROUP_ID: 3
      CONFIG_STORAGE_TOPIC: lab-connect-configs
      OFFSET_STORAGE_TOPIC: lab-connect-offsets
      STATUS_STORAGE_TOPIC: my_source_connect_statuses
      BOOTSTRAP_SERVERS: ${HOST_IP}:19092,${HOST_IP}:29092
    # volumes:
    #   - ./db_data/kafka/connect_lab/:/kafka/logs
    networks:
      - zookeeper
    depends_on:
      - zookeeper

  kafka-1:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENERS: INSIDE://kafka-1:9092,OUTSIDE://:9094
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-1:9092,OUTSIDE://${HOST_IP}:19092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    # volumes:
    #   - /volume1/docker/kafka/kf-1:/var/lib/kafka/data
    ports:
      - "19092:9092"
    networks:
      - zookeeper

  kafka-2:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENERS: INSIDE://kafka-2:9092,OUTSIDE://:9094
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka-2:9092,OUTSIDE://${HOST_IP}:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    # volumes:
    # - /volume1/docker/kafka/kf-2:/var/lib/kafka/data
    ports:
      - "29092:9092"
    networks:
      - zookeeper

  pgadmin:
    image: dpage/pgadmin4
    ports:
      - "5555:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    restart: unless-stopped
    networks:
      - acts
      - customers
      - gcustomers
      - labs
      - tos

  # generic:
  #   build:
  #     context: ./proto
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - "./proto:/app"
  #   working_dir: /app

  envoy:
    image: envoyproxy/envoy-alpine:v1.15.0
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml
    environment:
      - "ENVOY_UID=0"
    ports:
      - "80:80"
      - "3060:3060"
      - "4060:4060"
      - "2000:2000"
      - "3000:3000"
      - "2050:2050"
      - "8081:8081"
    networks:
      - test

  db_files:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_files2:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6001:5432"
    networks:
      - files
      - zookeeper
  api_files:
    build:
      context: "./files"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./files:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - files
      - zookeeper
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_files
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3010:3010"
      - "50051:50051"
    depends_on:
      - db_files
      - api_acts

  api_subscriptions:
    build:
      context: "./api-subscriptions"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./api-subscriptions:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - files
      - zookeeper
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_files
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3060:3060"
    depends_on:
      - db_files

  db_acts:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_acts2:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6002:5432"
    networks:
      - acts
      - zookeeper
  api_acts:
    build:
      context: "./acts"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./acts:/app"
      - "/app/node_modules"
      - ./proto:/proto
    networks:
      - zookeeper
      - acts
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_acts
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3020:3020"
    depends_on:
      - db_acts
      - api_customers

  db_customers:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_customers2:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6003:5432"
    networks:
      - customers
      - zookeeper
  api_customers:
    build:
      context: "./customers"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./customers:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - zookeeper
      - customers
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_customers
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3030:3030"
    depends_on:
      - db_customers
      - api_general_customers

  db_general_customers:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_general_customers:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6004:5432"
    networks:
      - gcustomers
      - zookeeper
  api_general_customers:
    build:
      context: "./general-customers"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./general-customers:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - test
      - zookeeper
      - gcustomers
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_general_customers
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3040:3040"
    depends_on:
      - db_general_customers
      - api_labs

  db_labs:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_labs:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6005:5432"
    networks:
      - labs
      - zookeeper
  api_labs:
    build:
      context: "./labs"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./labs:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - labs
      - zookeeper
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_labs
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3050:3050"
    depends_on:
      - db_labs

  db_tos:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_tos:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6009:5432"
    networks:
      - tos
      - zookeeper
  api_tos:
    build:
      context: "./type-of-sample"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./type-of-sample:/app"
      - "/app/node_modules"
      - ./proto:/proto
    networks:
      - tos
      - zookeeper
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_tos
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3090:3090"
    depends_on:
      - db_labs
      - api_files

  db_rules:
    image: debezium/postgres:latest
    volumes:
      - ./db_data/db_rules:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: mobicolab
      POSTGRES_USER: mobicolab
      POSTGRES_DB: postgres
    ports:
      - "6007:5432"
    networks:
      - rules
      - zookeeper
  api_rules:
    build:
      context: "./rules"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./rules:/app"
      - "/app/node_modules"
    networks:
      - rules
      - zookeeper
      - test
    environment:
      TYPEORM_PORT: 5432
      TYPEORM_HOST_DOCKER: db_rules
      TYPEORM_USERNAME: mobicolab
      TYPEORM_PASSWORD: mobicolab
      TYPEORM_DATABASE: postgres
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    ports:
      - "3070:3070"
    depends_on:
      - db_labs
      - api_tos

  api_templater:
    build:
      context: "./templater"
      dockerfile: Dockerfile.dev
    restart: always
    environment:
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 9092
    volumes:
      - "./templater:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - test
      - zookeeper
    ports:
      - "3080:3080"
    depends_on:
      - db_labs
      - api_rules

  db_mongo:
    image: mark600/mobicolab_portal_db:latest
    volumes:
      - ./db_data/mongo-data:/data/db
    ports:
      - "27017:27017"
    networks:
      - db_mongo
  server:
    build:
      context: "./server"
      dockerfile: Dockerfile.dev
    restart: always
    volumes:
      - "./server:/app"
    networks:
      - test
      - db_mongo
    ports:
      - "3000:3000"
    depends_on:
      - db_mongo
    command: ["npm", "run", "dev"]

  web:
    build:
      context: ./client
      dockerfile: "Dockerfile"
    volumes:
      - "./client:/app"
      # - "/app/node_modules"
    ports:
      - "4200:4200"
    networks:
      - test
    depends_on:
      - api_files

  api_gateway:
    build:
      context: "./api-gateway"
      dockerfile: "Dockerfile.dev"
    restart: always
    environment:
      KAFKA_HOST: ${HOST_IP}
      KAFKA_PORT1: 19092
      KAFKA_PORT2: 29092
    volumes:
      - "./api-gateway:/app"
      - "/app/node_modules"
      - "./proto:/proto"
    networks:
      - test
      - zookeeper
    ports:
      - "50020"
      - "2000:2000"
    depends_on:
      - api_files
      - api_customers
      - api_general_customers
      - api_labs

  # api_bridge:
  #   build:
  #     context: './bridge'
  #     dockerfile: "Dockerfile.dev"
  #   restart: always
  #   volumes:
  #     - "./bridge:/usr/app"
  #     - '/usr/app/node_modules'
  #   networks:
  #     - test
  #   depends_on:
  #       - db
  #       - api_files
  # ports:
  #   - "5000:5000"
  # command: npm run start:dev

# volumes:
#   mongo-data:
networks:
  db_mongo:
  test:
  tos:
  rules:
  acts:
  customers:
  gcustomers:
  labs:
  files:
  zookeeper:
